{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/colorPicker.js","webpack:///./src/components/sketchPad.js","webpack:///./src/components/tool.js","webpack:///./src/index.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChEA;AAAA;AAAA;AACA;AACA,iBAAiB,mBAAO,CAAC,uDAAuB;;AAEjC;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,8BAA8B;AAC9B;AACA;;AAEA,yCAAyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,8CAA8C;AAC9C,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,aAAa;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6CAA6C,aAAa;AAC1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,Y;AACA;AACA;;AAEA,Y;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC,qC;AACA,sDAAsD;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yB;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACvQA;AAAA;AAAA;AAAuB;;AAER;AACf;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAA+C;AACI;AACd;;AAErC;AACA;AACA;AACA;AACA;AACA,4BAA4B,+DAAW;AACvC,qBAAqB,wDAAI;AACzB,QAAQ,6DAAS;AACjB,CAAC,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","export default class ColorPicker {\n    constructor() {\n        this.colorStrip = document.getElementById('color-strip');\n        this.colorctx = this.colorStrip.getContext('2d');\n\n        // label to keep a track of the current color\n        this.colorLabel = document.getElementById('color-label');\n\n        this.x = 0;\n        this.y = 0;\n        this.dragging = false;\n        this.selectedColor = \"#58d33a\";\n\n        this.colorPalette();\n\n        this.mousedown = this.mousedown.bind(this);\n        // this.mousemove = this.mousemove.bind(this);\n        this.mouseup = this.mouseup.bind(this);\n        this.changeColor = this.changeColor.bind(this);\n\n        // events\n        this.colorStrip.addEventListener(\"mousedown\", this.mousedown);\n        this.colorStrip.addEventListener(\"mouseup\", this.mouseup);\n        // this.colorStrip.addEventListener(\"mousemove\", this.mousemove);\n    }\n\n    colorPalette() {\n        this.colorctx.rect(0, 0, this.colorStrip.width, this.colorStrip.height);\n        let gradient = this.colorctx.createLinearGradient(0, 0, this.colorStrip.width, 0);\n        gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');\n        gradient.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\n        gradient.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\n        gradient.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\n        gradient.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\n        gradient.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\n        gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');\n        this.colorctx.fillStyle = gradient;\n        this.colorctx.fill();\n    }\n\n    mousedown(e) {\n        this.dragging = true;\n        this.changeColor(e);\n    }\n\n    // mousemove(e) {\n    //     if (this.dragging ) {\n    //     this.changeColor(e);\n    //     }\n    // }\n\n    mouseup(e) {\n        this.dragging  = false;\n    }\n\n    changeColor(e) {\n        this.x = e.offsetX;\n        this.y = e.offsetY;\n        let imageData = this.colorctx.getImageData(this.x, this.y, 1, 1);\n        // debugger\n        this.selectedColor = 'rgba(' + imageData.data[0] + ',' + imageData.data[1] + ',' + imageData.data[2] + ',1)';\n        // rgba(255, 0, 0, 1)\n        this.colorLabel.style.backgroundColor = this.selectedColor;\n    }\n}\n\n\n","const API_ENDPOINT = 'https://inputtools.google.com/request?ime=handwriting&app=autodraw&dbg=1&cs=1&oe=UTF-8';\nconst STENCILS_ENDPOINT = 'src/data/stencils.json';\nconst stencils = require(\"../data/stencils.json\");\n\nexport default class SketchPad {\n    constructor(canvas, tool) {\n        \n        this.canvas = canvas;\n        this.tool = tool;\n        this.context = canvas.getContext(\"2d\");\n\n        // set the background to white\n        this.context.fillStyle = \"white\";\n        this.context.fillRect(0, 0, canvas.width, canvas.height);\n\n        // clear canvas\n        this.clearCanvasBtn = document.getElementById('clear-canvas-btn');\n\n        // color fill\n        this.colorFillBtn = document.getElementById(\"color-fill\");\n        \n        // undo button\n        this.undoBtn = document.getElementById(\"undo-btn\");\n\n        // redo button\n        this.redoBtn = document.getElementById(\"redo-btn\");\n\n        // suggestions section\n        this.drawSuggestions = document.getElementById(\"draw-suggestions\");\n\n        // list for undo and redo \n        this.undoList = [];\n        this.redoList = [];\n\n        // shapes\n        this.currentShape;\n        this.shapes = [];\n\n        // start time \n        this.pressedAt = 0;\n\n        // stencils \n        this.stencils = stencils;\n\n        this.dragging = false; // indicates if the mouse is held down\n        this.loadStencils();\n        this.prepareNewShape();\n\n        this.suggestionsCompleted = true; // when you pick an img it will keep getting new suggestions \n\n        // binds\n        this.putPoint = this.putPoint.bind(this);\n        this.engage = this.engage.bind(this);\n        this.disengage = this.disengage.bind(this);\n        this.clear = this.clear.bind(this);\n        this.colorFill = this.colorFill.bind(this);\n        this.undo = this.undo.bind(this);\n        this.redo = this.redo.bind(this);\n        this.saveState = this.saveState.bind(this);\n        this.restoreState = this.restoreState.bind(this);\n        this.loadSuggestionsFromAPI = this.loadSuggestionsFromAPI.bind(this);\n        this.displaySuggestions = this.displaySuggestions.bind(this);\n        this.prepareNewShape = this.prepareNewShape.bind(this);\n        this.storeCoordinates = this.storeCoordinates.bind(this);\n        this.commitCurrentShape = this.commitCurrentShape.bind(this);\n        this.pickSuggestion = this.pickSuggestion.bind(this);\n\n        // draw events\n        this.canvas.addEventListener(\"mousedown\", this.engage);\n        const html = document.getElementsByTagName(\"html\")[0];\n        html.addEventListener(\"mouseup\", this.disengage)\n        // this.canvas.addEventListener(\"mouseup\", this.disengage);\n        this.canvas.addEventListener(\"mousemove\", this.putPoint);\n\n        // action events\n        this.clearCanvasBtn.addEventListener('click', this.clear);\n        this.colorFillBtn.addEventListener(\"click\", this.colorFill);\n        this.undoBtn.addEventListener(\"click\", this.undo);\n        this.redoBtn.addEventListener(\"click\", this.redo);\n        this.drawSuggestions.addEventListener(\"click\", this.pickSuggestion);\n    }\n\n    loadStencils() {\n        // debugger\n        // this.Http.get(STENCILS_ENDPOINT).subscribe(response => this.stencils = response.json());\n    }\n\n    displaySuggestions(iconList) {\n        this.drawSuggestions.innerHTML = '';\n\n        iconList.forEach(icon => {\n            // debugger\n            if (icon in this.stencils) {\n                // each icon has different versions of drawing\n                this.stencils[icon].forEach(type => {\n                    // debugger\n                    // let img = new Image();\n                    // img.crossOrigin = \"Anonymous\"\n                    // img.src = type.src;\n                    this.drawSuggestions.innerHTML += '<img src=\"' + type.src + '\" crossOrigin=\"Anonymous\" />';\n                });\n            }\n\n            // debugger\n        });\n    }\n\n    loadSuggestionsFromAPI(shapes) {\n        let url = API_ENDPOINT;\n        let requestBody = {\n            input_type: 0,\n            requests: [{\n                ink: shapes,\n                language: 'autodraw',\n                writing_guide: {\n                    height: this.canvas.height,\n                    width: this.canvas.width\n                }\n            }]\n        };\n\n        let headers = new Headers({\n            'Content-Type': 'application/json; charset=utf-8'\n        });\n        fetch(url, {\n            method: 'POST',\n            headers,\n            body: JSON.stringify(requestBody),\n        }).then((response) => {\n            // debugger\n            return response.json();\n        }).then((jsonResponse) => {\n            // debugger\n            this.displaySuggestions(jsonResponse[1][0][1]);\n        });\n    }\n\n    /////\n    prepareNewShape() {\n        this.currentShape = [\n            [], // X coordinates\n            [], // Y coordinates\n            []  // Times\n        ];\n    }\n    storeCoordinates(X, Y, time) {\n        this.currentShape[0].push(X);\n        this.currentShape[1].push(Y);\n        this.currentShape[2].push(time);\n    }\n\n    commitCurrentShape() {\n        this.shapes.push(this.currentShape);\n        // displaySuggestions goes here\n    }\n\n    pickSuggestion(e) {\n        // debugger\n        // this.clear();\n        let image = new Image();\n        image.crossOrigin = \"Anonymous\";\n        image.src = e.target.src;\n        image.setAttribute('style', \"width: 50px; height:50px;\");\n        // image.setAttribute('height', 50);\n\n        image.backgroundColor = 'transparent';\n        image.onload = () => this.context.drawImage(\n            image, \n            e.offsetX - 25,\n            e.offsetY - 25,\n            50 * (1 / 2 * this.context.lineWidth),\n            50 * (1 / 2 * this.context.lineWidth));\n    }\n    ///////\n\n    saveState(list, keepRedo) {\n        keepRedo = keepRedo || false;\n        if (!keepRedo) {\n            this.redoList = [];\n        }\n\n        (list || this.undoList).push(this.canvas.toDataURL());\n    }\n\n    restoreState(popList, pushList) {\n        if (popList.length) {\n            this.saveState(pushList, true);\n            let ele = popList.pop();\n            // let img = new Element('img', { 'src': ele });\n            let img = document.createElement('img');\n            img.src = ele;\n            img.crossOrigin = \"Anonymous\"\n\n            img.onload = () => {\n                // this.clear();\n                this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n                this.context.drawImage(img, 0, 0, this.canvas.width, this.canvas.height, 0, 0, this.canvas.width, this.canvas.height);\n            }\n        }\n    }\n\n    undo() { \n        this.restoreState(this.undoList, this.redoList);\n    }\n\n    redo() { \n        this.restoreState(this.redoList, this.undoList);\n    }\n\n    putPoint(e) {\n        const brushWidth = document.getElementById(\"brush-size\");\n        // current collor goes here\n\n        if(this.dragging) {\n            this.context.lineWidth = brushWidth.value;\n            // this.context.strokeStyle = \"#58d33a\";\n            this.context.strokeStyle = this.tool.colorPicker.selectedColor;\n            this.context.lineCap = \"round\";\n\n            this.context.lineTo(e.offsetX, e.offsetY);\n            this.context.stroke(); // nothing will show untill we do stroke() or fill()\n            this.context.beginPath(); \n            this.context.moveTo(e.offsetX, e.offsetY); // sets an active point\n\n            // save the coords to the current shape\n            this.storeCoordinates(e.offsetX, e.offsetY, Date.now() - this.pressedAt);\n        }\n    }\n\n    engage(e) {\n        this.saveState();\n        this.dragging = true;\n        this.prepareNewShape();\n        this.pressedAt = Date.now();\n        this.putPoint(e);  \n    }\n\n    disengage(e) {\n        this.dragging = false;\n        this.context.beginPath(); // clears any current path \n        this.commitCurrentShape();\n        this.loadSuggestionsFromAPI(this.shapes);\n    }\n\n    colorFill() {\n        this.context.fillStyle = this.tool.colorPicker.selectedColor;\n        this.context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    clear(e) {\n        this.context.clearRect(\n            0,\n            0,\n            this.context.canvas.width,\n            this.context.canvas.height\n        );\n        this.context.fillStyle = \"white\";\n        this.context.fillRect(0, 0, canvas.width, canvas.height);\n\n        this.shapes = [];\n        this.drawSuggestions.innerHTML = '';\n        this.suggestionsCompleted = true;\n    }\n}","import \"./colorPicker\";\n\nexport default class Tool {\n    constructor(colorPicker, BrushPicker) {\n        this.colorPicker = colorPicker;\n    }\n}","import SketchPad from \"./components/sketchPad\";\nimport ColorPicker from \"./components/colorPicker\";\nimport Tool from \"./components/tool\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById(\"canvas\");\n    canvas.setAttribute('width', 800);\n    canvas.setAttribute('height', 800);\n    // tools goes here, and then will pass it as a second arg to the cnavas\n    const colorPicker = new ColorPicker();\n    const tool = new Tool(colorPicker);\n    new SketchPad(canvas, tool);\n});"],"sourceRoot":""}